// Code: 1
#include<bits/stdc++.h>
using namespace std;

int main(){
    
     int n1,n2;
     cin >> n1 >> n2;

     while (n1>0 && n2>0)
     {
        if(n1>n2){
            n1 = n1%n2;
        }else{
            n2 = n2%n1;
        }

     }
     
     if(n1==0){
            cout << n2;
          
        }else{
            cout << n1;
           
        }

    return 0;
}
// TC -> O(log(min(n1, n2)))




// Code: 2
// #include<bits/stdc++.h>
// using namespace std;

// int main(){
    
//      int n1,n2;
//      cin >> n1 >> n2;

//      for(int i=min(n1,n2); i>=1; i--){
//         if(n1%i==0 && n2%i==0){
//             cout << i;
//             break;
//         }
//      }
    

//     return 0;
// }
// TC -> O(min(n1, n2)) 


/*

GCD = Greatest Common Divisors
HCF = Highest Common Factor

*/


/*

Input: 9 12
Output: 3

Input: 11 13
Output: 1

Input: 20 40
Output: 20


ЁЯУЬ ржХрзЛржбрзЗрж░ ржмрж░рзНржгржирж╛ (Description in Bangla)
ржПржЗ C++ ржкрзНрж░рзЛржЧрзНрж░рж╛ржоржЯрж┐рж░ ржХрж╛ржЬ рж╣рж▓рзЛ ржжрзБржЯрж┐ ржкрзВрж░рзНржгрж╕ржВржЦрзНржпрж╛рж░ GCD (Greatest Common Divisor) ржПржмржВ LCM (Least Common Multiple) ржирж┐рж░рзНржгрзЯ ржХрж░рж╛ред ржПржЯрж┐ ржЧржгржирж╛рж░ ржЬржирзНржп Euclidean Algorithm ржПржмржВ ржПржХржЯрж┐ рж╕рж╛ржзрж╛рж░ржг ржЧрж╛ржгрж┐рждрж┐ржХ рж╕рзВрждрзНрж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред

ЁЯФз ржХрзЛржбржЯрж┐ ржпрж╛ ржХрж░рзЗ:
ржЗржЙржЬрж╛рж░ ржерзЗржХрзЗ ржжрзБржЯрж┐ рж╕ржВржЦрзНржпрж╛ (n1 ржУ n2) ржЗржиржкрзБржЯ ржирзЗрзЯред

Euclidean Algorithm ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ GCD ржирж┐рж░рзНржгрзЯ ржХрж░рзЗред

GCD ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржирж┐ржЪрзЗрж░ рж╕рзВрждрзНрж░ ржЕржирзБржпрж╛рзЯрзА LCM ржирж┐рж░рзНржгрзЯ ржХрж░рзЗ:

LCM
=
ЁЭСЫ
1
├Ч
ЁЭСЫ
2
GCD
LCM= 
GCD
n1├Чn2
тАЛ
 
ржПржХрж╕рж╛ржерзЗ GCD ржУ LCM ржкрзНрж░рж┐ржирзНржЯ ржХрж░рзЗ ржжрзЗрзЯред

ЁЯФН GCD ржирж┐рж░рзНржгрзЯрзЗрж░ ржкржжрзНржзрждрж┐ (Euclidean Algorithm):
ржПржЗ ржЕрзНржпрж╛рж▓ржЧрж░рж┐ржжржоржЯрж┐ ржорзВрж▓ржд ржПржЗ рж╕рзВрждрзНрж░рзЗрж░ ржЙржкрж░ ржХрж╛ржЬ ржХрж░рзЗ:

GCD
(
ЁЭСО
,
ЁЭСП
)
=
GCD
(
ЁЭСП
,
ЁЭСО
%
ЁЭСП
)
GCD(a,b)=GCD(b,a%b)
ЁЯСЙ ржкрзНрж░рждрж┐ ржзрж╛ржкрзЗ ржмрзЬ рж╕ржВржЦрзНржпрж╛ржЯрж┐ржХрзЗ ржЫрзЛржЯ рж╕ржВржЦрзНржпрж╛рж░ рж╕рж╛ржерзЗ ржнрж╛ржЧ ржХрж░рзЗ ржнрж╛ржЧрж╢рзЗрж╖ ржирзЗрзЯрж╛ рж╣рзЯ ржПржмржВ ржПржЗ ржкрзНрж░ржХрзНрж░рж┐рзЯрж╛ ржЪрж▓рждрзЗ ржерж╛ржХрзЗ ржпрждржХрзНрж╖ржг ржирж╛ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ 0 рж╣рзЯрзЗ ржпрж╛рзЯред ржпрзЗржЯрж╛ ржЕржмрж╢рж┐рж╖рзНржЯ ржерж╛ржХрзЗ, рж╕рзЗржЯрж╛ржЗ GCDред

ЁЯзо LCM ржирж┐рж░рзНржгрзЯрзЗрж░ рж╕рзВрждрзНрж░:
LCM ржирж┐рж░рзНржгрзЯ ржХрж░рж╛рж░ рж╕рзВрждрзНрж░ рж╣рж▓рзЛ:

LCM
(
ЁЭСО
,
ЁЭСП
)
=
ЁЭСО
├Ч
ЁЭСП
GCD
(
ЁЭСО
,
ЁЭСП
)
LCM(a,b)= 
GCD(a,b)
a├Чb
тАЛ
 
тЪая╕П рждржмрзЗ рж╕рж░рж╛рж╕рж░рж┐ a * b ржХрж░рж▓рзЗ ржмрзЬ рж╕ржВржЦрзНржпрж╛рж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ overflow рж╣рждрзЗ ржкрж╛рж░рзЗред рждрж╛ржЗ ржХрзЛржбрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ:

LCM
=
(
ЁЭСО
/
GCD
)
├Ч
ЁЭСП
LCM=(a/GCD)├Чb


LCM ржирж┐рж░рзНржгрзЯ: O(1) (ржПржХржЯрж┐ рж╕рж░рж▓ ржЧрж╛ржгрж┐рждрж┐ржХ рж╕рзВрждрзНрж░)


*/